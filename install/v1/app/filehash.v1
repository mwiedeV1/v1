<?v1
/*
  FileHash Utility
  Calculate the checksum of a file with a specific hash algorithm.

  Hash functions of V1 module crypt and optional OpenSSL will be used.

  Usage: v1 filehash.v1 [OPTIONS] <filename>

  Options:

   -a,  --algorithm=ALGORITHM     use hash ALGORITHM (sha256 is default).
   -b,  --binary                  print checksum as binary data.
   -s,  --supported               print supported algorithms.
*/

error_reporting (0); // 1 to show all warnings

dl ("crypt");

const DEFAULT_ALGO = "sha256";
const ROOT_PATH = getcwd  ();

fVerbose = true;
options = array ();
argIdx = 2;
arg = "";
algosIntern = hash_algos();
algosOpenSSL = array ("md4", "mdc2", "ripemd160", "blake2b512", "blake2s256", "sha224", "sha384", "whirlpool");
algos = array_merge (algosIntern, algosOpenSSL);
sort (algos);
algo = DEFAULT_ALGO;

while (isset (argv[argIdx]))
{
	arg = argv[argIdx];
	if (arg=="-a") {
		if (isset (argv[argIdx+1])) {
			algo = argv[argIdx+1];
			argIdx++;
		}
		else {
			print ("Algorithm required.");
			exit (1);
		}
	}
	else
	if (strpos (arg, "--algorithm=")===0) {
		assign (tmp, algo) = explode ("=", arg);
	}
	else 
	if (arg=="-s" || arg=="--supported") {
		options["s"] = true;
	}
	else 
	if (arg=="-b" || arg=="--binary") {
		options["b"] = true;
	}
	else 
	if (argIdx<(count (argv)-1)) {
		print ("Unknown option ".arg);
		exit (1);
	}
	argIdx++;
}

if (options["s"])
{
	foreach (algos as algo)
		print (algo);
}
else 
if (!empty (arg) && arg!="--help")
{
	if (!in_array (algo, algos)) {
		print ("Unsupported algorithm: ", algo);
		exit (1);
	}

	if (!is_file (arg)) {
		print ("File not found.");
		exit (2);
	}
	if (in_array (algo, algosIntern)) {
		ret = hash_file (algo, arg, options["b"]);
	}
	else {
		require_once ("../lib/openssl_hash.inc.v1");
		ret = openssl_hash_file (algo, arg, options["b"], true);
	}

	if (ret===false) {
		exit (1);
	}
	print (ret);
	exit (0);
}
else
{
	print (
	    "Usage: v1 filehash.v1 [OPTIONS] <filename>\r\n\r\n".
	    "Options:\r\n".
	    " -a,  --algorithm=ALGORITHM     use hash ALGORITHM (".DEFAULT_ALGO." is default).\r\n".
	    " -b,  --binary                  print checksum as binary string.\r\n".
	    " -s,  --supported               print supported algorithms.\r\n"
	);
	exit (1);
}

?>