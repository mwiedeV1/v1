<?v1 require_once ("helpers/start.v1"); ?>
<h3>SSL-Test (Module 'ssl')</h3>
<p>The compiled module 'ssl' provide a wrapper for some (not all) OpenSSL functions. It is compiled statically against an older verion of OpenSSL. You can take the module 'ssl' to provide TLS 1.2 functionality on systems where OpenSSL libraries (libcrypto, libssl) are not available or if you need high performance for server applications. </p>
<p>If the OpenSSL libraries are available on your system, you can take the native function calling API in lib/openssl.inc.v1 and lib/openssl_ssl.inc.v1 instead of module 'ssl'. Take a look at example ssl_with_openssl.v1. </p>
<?v1

dl ("ssl");

// Create classic socket
host = "v1-script.net";
print ("<p>Host: ".host."</p>"); 

socket = fsockopen (host, 443);
if (socket) {
	// Create SSL Context
	ctx = SSL_CTX_new ();
	
	SSL_CTX_set_options (ctx, SSL_FLAG ("SSL_OP_NO_SSLv3"));

	// Create SSL
	ssl = SSL_new (ctx);
  SSL_set_cipher_list (ssl, "HIGH:!aNULL:!kRSA:!PSK:!SRP:!MD5:!RC4");


	// Set socket
	SSL_set_fd (ssl, socket);
    	
	// Connect SSL
	if (SSL_connect (ssl, host)) {
	    
	    // Print certificate information
        print ("<h4>Certificate</h4>"); 
   		cert = SSL_get_peer_certificate (ssl);

   		foreach (cert as key => data) {
   		    if (!is_array (data))
   		        print (key." = ".data."<br />");
   		    else {
           		foreach (data as key2 => value2) {
           		    print (key.":".key2." = ".value2."<br />");
           		}
   		    }
   		}
   		
   		// Print ciphers
        print ("<h4>Ciphers</h4>"); 	    
	    print ("<p>".SSL_get_cipher_list (ssl)."</p>");

		// Write HTTP header
		SSL_write (ssl, "GET / HTTP/1.1\r\nHost: ".host."\r\nConnection: close\r\n\r\n");

		// Read header
		print ("<h4>HTTP-Header</h4>"); 
		str = "";
		while (SSL_readln (ssl, str)) {
		    print (str."<br >");
		    if (str=="")
		        break;
		}
	}
	
	// Free SSL
	SSL_free (ssl);
	
	// Free SSL Context
	SSL_CTX_free (ctx);
	
	// Close original socket
	fclose (socket);
}


?>
<?v1 require_once ("helpers/end.v1"); ?>
