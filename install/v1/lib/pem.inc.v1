<?v1
// Functions to work with PEM and ANS1 formatted files

function base64url_encode(data)
{
	return rtrim(str_replace (['+','/'],['-','_'], base64_encode(data)), '=');
}

function base64url_decode(data)
{
	return base64_decode(str_replace (['-','_'], ['+','/'], data));
}

function pem2bin (filename)
{
	fh = fopen (filename, "r");
	if (fh) {
		line = "";
		fStart = false;
		key = "";
		while (freadln (fh, line)) {
			if (strpos (line, "-----BEGIN ")===0) {
				key = "";
				fStart = true;
				continue;
			}
			if (strpos (line, "-----END ")===0)
				fStart = false;
			if (fStart) {
				key.=line;
			}
		}
		fclose (fh);

		key = base64_decode (key);
		return key;
	}
	return false;
}

const ASN1_START            = 0;
const ASN1_SEQUENCE_LENGTH  = 1;
const ASN1_ELEMENT_LENGTH   = 2;
const ASN1_DATA_TYPE        = 3;
const ASN1_DATA_LENGTH      = 4;
const ASN1_DATA_VALUE       = 5;

// Status vars for ANS1 parsing functions

/*
Usage:

store = array ();
bin = pem2bin ("cert.pem");
parseANS1Start ();
parseASN1 (memref (bin), strlen (bin), store);
print_r (store);

*/

ans1Vars = array ();

function parseANS1Start ()
{
	global ans1Vars;
	ans1Vars = array (
	               'flag' => 0,
	               'dt' => 0,
	               'df' => 0,
	               'dl' => 0,
	               'ei' => 0,
	               'tc' => 0,
	               'fObj' => 0,
	               'dv' => "");
}

function parseASNLen (&pnt, end)
{
	l = binparse (memat (pnt, 1), 1);
	if (l & 0x80) {
		n = l & 0x7F;
		if (pnt+1+n<=end) {
			if (n==1)
				l = binparse (memat (pnt+1, n), 1, 0, 0, 1);
			else if (n==2) {
				l = binparse (memat (pnt+1, n), 2, 0, 0, 1);
			}
			else {
				l = 0;
				n = 0;
			}

			pnt+=n;
		}
		else {
			// Length is longer than buffer
			// Should abort interprete
			printf ("length ".n." (byte %02x) longer than buffer", l, l);
			l = 0;
		}
	}
	pnt++;
	return l;
}

function parseASN1 (&pnt, l, &store, fSub=false)
{
	global ans1Vars;
	end = pnt + l;
	while (pnt<end) {
		if (ans1Vars['flag']==ASN1_DATA_VALUE) {

			ans1Vars['dv']=memat (pnt, ans1Vars['dl']);

			if (ans1Vars['dl']==0) // Infinite length should be not allowed!
				ans1Vars['dl'] = strlen (ans1Vars['dv']);

			pnt+=ans1Vars['dl'];

			// Set the data
			array_push (store, array ("VALUE", ans1Vars['dt'], ans1Vars['dv']));
			ans1Vars['flag'] = ASN1_START;
			continue;
		}
		else if (ans1Vars['flag']==ASN1_DATA_LENGTH) {
			bo = 0;
			ans1Vars['dl'] = parseASNLen (pnt, end);
			if (ans1Vars['dt']!=5) {
				ans1Vars['flag'] = ASN1_DATA_VALUE;

				if (ans1Vars['dt']==2) {
					if (ans1Vars['dl']>4) {
						ans1Vars['dl']--;
						bo = binparse (memat (pnt++, 1), 1);  // Bit offset
					}
				}
				else if (ans1Vars['dt']==3) {
					// Bit String can contain sequences
					ans1Vars['dl']--;
					bo = binparse (memat (pnt++, 1), 1);  // Bit offset, not used!
					bsf = binparse (memat (pnt, 1), 1);  // Format
					if (bsf==0x04) {
						pnt++;
						ans1Vars['dl']--;
					}
					else if (bsf==0x30) {
						pnt++;
						ans1Vars['dl']--;
						i = array_push (store, array ());
						store[i-1]=["VALUE", ans1Vars['dt'], ["SEQUENCE", 0, []]];
						ans1Vars['flag'] = ASN1_START;
						l2 = parseASNLen (pnt, end);
						parseASN1 (pnt, l2, store[i-1][2][2], fSub);
						continue;
					}
				}
			}
			else {
				// NULL
				array_push (store, array ("VALUE", ans1Vars['dt'], 0));
				ans1Vars['flag'] = ASN1_START;
			}
			ans1Vars['dv'] = "";
			continue;
		}
		else if (ans1Vars['flag']==ASN1_ELEMENT_LENGTH) {
			ans1Vars['flag'] = ASN1_DATA_TYPE;
			ans1Vars['dl'] = parseASNLen (pnt, end);
			i = array_push (store, array ());
			store[i-1]=["ELEMENT", 0, []];
			parseASN1 (pnt, ans1Vars['dl'], store[i-1][2], fSub);
			ans1Vars['flag'] = ASN1_START;
		}
		else if(ans1Vars['flag']==ASN1_SEQUENCE_LENGTH) {
			ans1Vars['flag'] = ASN1_START;
			i = array_push (store, array ());
			store[i-1]=["SEQUENCE", 0, []];
			l2 = parseASNLen (pnt, end);
			parseASN1 (pnt, l2, store[i-1][2], fSub);
			ans1Vars['flag'] = ASN1_START;
		}
		else {
			s = binparse (memat (pnt, 1), 1);
			if (s==0x00) {
				pnt++;
			}
			else if (s==0x30) {
				ans1Vars['flag'] = ASN1_SEQUENCE_LENGTH;
				// Reset class
				ans1Vars['fObj'] = ans1Vars['tc'] = ans1Vars['ei'] = 0;
			}
			else  {
				ans1Vars['dt'] = s;
				ans1Vars['dv'] = "";
				ans1Vars['df'] = ans1Vars['dt'] & 0x20; // Format
				if (ans1Vars['dt'] & 0x80) {

					if (((s & 0x1F)==4 || (s & 0x1F)==3) && fSub) { // Could make problems!
						ans1Vars['dt'] = 4;
						ans1Vars['flag']=ASN1_DATA_VALUE;
						continue;
					}

					ans1Vars['flag'] = ASN1_ELEMENT_LENGTH;
					ans1Vars['ei'] = (ans1Vars['dt'] & 0x1F); // Element index
					ans1Vars['tc'] = (ans1Vars['dt'] & 0xC0); // Tag class
				}
				else  {

					if (s>0x31) {
						ans1Vars['dt'] = 4;
						ans1Vars['flag']=ASN1_DATA_VALUE;
						continue;
					}

					ans1Vars['flag'] = ASN1_DATA_LENGTH;
					if (ans1Vars['dt']==0x31) {
						// Set will be ignored
						pnt++;
						parseASNLen (pnt, end);
						ans1Vars['flag'] = ASN1_START;
						continue;
					}
					else {
						ans1Vars['dt'] = ans1Vars['dt'] & 0x1F;
					}
				}
			}
			pnt++;
		}
	}
}

function dumpANS1 (store, tab="", index="", fSub=false)
{
	indexBase = index;
	foreach (store as idx => data) {

		index=indexBase."[".idx."]";


		print (tab.data[0]);

		if (is_array (data[2])) {
			if (data[2][0]==="SEQUENCE") {
				dumpANS1 (data[2][2], tab."   ", index, fSub);
			}
			else
				dumpANS1 (data[2],  tab."   ", index, fSub);
		}
		else {
			datatype = data[1];
			fPrint = false;
			switch (data[1]) {

				case 1:
					datatype = "BOOLEAN";
					if (data[2])
						data[2] = "TRUE";
					else
						data[2] = "FALSE";
					fPrint = true;
					break;

				case 2:
					datatype = "INTEGER (".(strlen (data[2])*8)." Bits)";
					break;

				case 3:
					datatype = "BIT STRING (".(strlen (data[2])*8)." Bits)";
					break;

				case 4:
					datatype = "OCTET STRING (".(strlen (data[2]))." Bytes)";
					break;

				case 6:
					datatype = "OBJECT IDENTIFIER";
					break;

				case 12:
					datatype = "UTF8String";
					fPrint = true;
					break;

				case 19:
					datatype = "PrintableString";
					fPrint = true;
					break;

				case 22:
					datatype = "IA5String";
					fPrint = true;
					break;

				case 23:
					datatype = "UTCTime";
					fPrint = true;
					break;
			}

			if (!fPrint) {
				if (data[1]==5)
					print (tab."   NULL");
				else if (strlen (data[2])>64)
					print (tab."   ".datatype." => ", strlen (data[2])." bytes");
				else
					print (tab."   ".datatype." => ", bin2hex (data[2]));
			}
			else
				print (tab."   ".datatype." => ", data[2]);

			/*
			if (!fSub)
			  print (tab."   ".index);
			*/

			// Sub parsing
			if (data[1]==4 && (binparse (data[2], 1)==0x30 || binparse (data[2], 1)==0x04)) {
				global store2;
				store2 = array ();
				parseANS1Start ();
				parseASN1 (memref (data[2]), strlen (data[2]), store2, true);
				dumpANS1 (store2, tab."       ", index, true);
			}

		}
	}
}

?>