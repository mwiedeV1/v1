<?v1
// Replace with correct path of OpenSSL libCrypro library (libcryptoMD.dll or libcrypto.so)
if (!isset (libcryptoLibName))
  libcryptoLibName =  'libcrypto';

hDLLCrypto = dl (libcryptoLibName, true);
hDLLSSL = null; //  dl ("libssl", true); // We dont use libSSL native because we have V1 module ssl.

if (!hDLLCrypto) {
  // Search for libraries
  libList = explode ("\n", system ('/usr/bin/find /usr -name "libcrypto*.so*"'));
  if (!empty (libList[0])) {
      hDLLCrypto = dl (libcryptoLibName = libList[0], true);
  }
}

if (!hDLLCrypto) {
    print ("OpenSSL library not found.\r\nSet libcryptoLibName in ".__FILE__." to libcrypto.so or libcryptoMD.dll");
    exit (1);
}


// OpenSSL functions
// https://github.com/openssl/openssl/blob/master/include/openssl/rsa.h
// https://github.com/openssl/openssl/blob/master/include/openssl/pem.h
// https://github.com/openssl/openssl/blob/master/include/openssl/bio.h
// https://github.com/openssl/openssl/blob/master/include/openssl/evp.h

const RSA_F4 = 65537;
const MBSTRING_ASC = 4097;    
const MBSTRING_UTF8 = 4096;

function OpenSSL_version (f=0) {
    global hDLLCrypto;
    ret = call (hDLLCrypto, "OpenSSL_version", [["i"], "s"], f);
    if (ret===false)
      ret = call (hDLLCrypto, "SSLeay_version", [["i"], "s"], f);       
    return ret;
}

function BN_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "BN_new", [[], "p"]);
}

function BN_free (bn) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BN_free", [['p'], "i"], bn);
}

function BN_set_word (bn, word) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BN_set_word", [['p', 'i'], "p"], bn, word);
}

function RSA_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "RSA_new", [[], "p"]);
}

function RSA_generate_key_ex (rsa, bits, bn, cb=null) {
    global hDLLCrypto;
    return call (hDLLCrypto, "RSA_generate_key_ex", [['p','i','p','p'], "p"], rsa, bits, bn, cb);
}

function X509_REQ_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_new", [[], "p"]);
}

function X509_REQ_free (x509_req) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_free", [['p'], "i"], x509_req);
}

function X509_REQ_set_version (x509_req, version) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_set_version", [['p', 'i'], "i"], x509_req, version);
}

function X509_NAME_add_entry_by_txt (x509_name, field, type, value, len=-1, loc=-1, set=0) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_NAME_add_entry_by_txt", [['p','s','i','s','i','i','i'], "i"], x509_name, field, type, value, len, loc, set); 
}

function X509_REQ_get_subject_name (x509_req) {
    global hDLLCrypto;
    ret=call (hDLLCrypto, "X509_REQ_get_subject_name", [['p'], "p"], x509_req);
    if (ret===false) {
      // Old version X509_REQ_get_subject_name(x) ((x)->req_info->subject)
    	req_info = binparse (memat (x509_req, _ALIGN));
    	ret = binparse (memat (req_info+_ALIGN*4, _ALIGN));
    }
    return ret;
}

function EVP_PKEY_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_PKEY_new", [[], "p"]);
}

function EVP_PKEY_free (pKey) {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_PKEY_free", [['p'], "i"], pKey);
}

function EVP_PKEY_set1_RSA (pKey, rsa) {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_PKEY_set1_RSA", [['p', 'p'], "i"], pKey, rsa);
}

function X509_REQ_set_pubkey (x509_req, pKey) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_set_pubkey", [['p', 'p'], "i"], x509_req, pKey);
}

function X509_REQ_sign (x509_req, pKey, hash) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_sign", [['p', 'p', 'p'], "i"], x509_req, pKey, hash);
}

function BIO_new (type) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BIO_new", "p:p", type);
}

function BIO_s_mem () {
    global hDLLCrypto;
    return call (hDLLCrypto, "BIO_s_mem", [[], "p"]);
}

function BIO_new_file (filename, mode) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BIO_new_file", [['s','s'], "p"], filename, mode);
}

function BIO_new_mem_buf (buf, len) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BIO_new_mem_buf", "si:p", buf, len);
}

function BIO_puts (mem, buf) {
    global hDLLCrypto;
    return call (hDLLCrypto, "BIO_puts", "ps:i", mem, buf);
}

function PEM_read_bio_PrivateKey (bp, &x, cb, u) {
    global hDLLCrypto;
    ret = call (hDLLCrypto, "PEM_read_bio_PrivateKey", "prps:i", bp, x, cb, u);
    x = binparse (x);
    return ret;
}

function PEM_write_bio_X509_REQ (bio, x509_req) {
    global hDLLCrypto;
    ret = call (hDLLCrypto, "PEM_write_bio_X509_REQ", [['p','p'], "i"], bio, x509_req);
}

function PEM_write_bio_PrivateKey (bio, key, cipher, kstr, klen, cb, u) {      
    global hDLLCrypto;
    return call (hDLLCrypto, "PEM_write_bio_PrivateKey", "pppsips:i", bio, key, cipher, kstr, klen, cb, u);
}

function PEM_write_bio_RSAPrivateKey (bio, x, enc, kstr, klen, cb, u) {
    global hDLLCrypto;
    ret = call (hDLLCrypto, "PEM_write_bio_RSAPrivateKey", [['p','p', 'p','s','i','p','p'], "i"], bio, x, enc, kstr, klen, cb, u);
}

function BIO_free_all (bio) {
    global hDLLCrypto;
    call (hDLLCrypto, "BIO_free_all", [['p'], "i"], bio);
}

function EVP_sha1 () {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_sha1", [[], "p"]);
}

function EVP_sha256 () {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_sha256", [[], "p"]);
}

function EVP_aes_256_cbc () {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_aes_256_cbc", [[], "p"]);
}

function ERR_load_crypto_strings () {
    global hDLLCrypto;
    return call (hDLLCrypto, "ERR_load_crypto_strings", [[], "i"]);
}

function OPENSSL_config () {
    global hDLLCrypto;
    return call (hDLLCrypto, "OPENSSL_config", [["p"], "i"], null);
}

function OpenSSL_add_all_ciphers () {
    global hDLLCrypto;
    return call (hDLLCrypto, "OpenSSL_add_all_ciphers", [[], "i"], null);
}

function OpenSSL_add_all_digests () {
    global hDLLCrypto;
    return call (hDLLCrypto, "OpenSSL_add_all_digests", [[], "i"]);
}

function OpenSSL_add_all_algorithms () {
    global hDLLCrypto;
    return call (hDLLCrypto, "OpenSSL_add_all_algorithms", [[], "i"]);
}

function X509_EXTENSION_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_EXTENSION_new", [[], "p"]);
}

function X509_EXTENSION_free (ext) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_EXTENSION_free", [['p'], "p"], ext);
}

function X509V3_EXT_conf_nid (conf, ctx, id, value) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509V3_EXT_conf_nid", [['p', 'p', 'i', 's'], "p"], conf, ctx, id, value);
}

function X509_REQ_get_extensions (req) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_get_extensions", [['p'], "p"], req);
}

function X509_REQ_add_extensions (req, stack) {
    global hDLLCrypto;
    return call (hDLLCrypto, "X509_REQ_add_extensions", [['p', 'p'], "i"], req, stack);
}

function OPENSSL_sk_new () {
    global hDLLCrypto;
    return call (hDLLCrypto, "OPENSSL_sk_new", [[], "p"]);
}

function OPENSSL_sk_free (stack) {
    global hDLLCrypto;
    return call (hDLLCrypto, "OPENSSL_sk_free", [['p'], "i"], stack);
}

function OPENSSL_sk_push (stack, obj) {
    global hDLLCrypto;
    return call (hDLLCrypto, "OPENSSL_sk_push", [['p', 'p'], "i"], stack, obj);
}

function PKCS5_PBKDF2_HMAC_SHA1 (pass, passlen, salt, saltlen, iter, keylen, &out) {
    global hDLLCrypto;
    return call (hDLLCrypto, "PKCS5_PBKDF2_HMAC_SHA1", "sisiiir:i", pass, passlen, salt, saltlen, iter, keylen, out);
}

function PKCS5_PBKDF2_HMAC (pass, passlen, salt, saltlen, iter, digest, keylen, &out) {
    global hDLLCrypto;
    return call (hDLLCrypto, "PKCS5_PBKDF2_HMAC", "sisiipir:i", pass, passlen, salt, saltlen, iter, digest, keylen, out);
}

function EVP_CipherInit (&ctx, type, key, iv, enc) {
    global hDLLCrypto;
    ctx = "";
    resize (ctx, 4096);
    return call (hDLLCrypto, "EVP_CipherInit", "rpssi:i", ctx, type, key, iv, enc);
}

function EVP_CIPHER_CTX_block_size (&ctx) {
    global hDLLCrypto;
    return call (hDLLCrypto, "EVP_CIPHER_CTX_block_size", "r:i", ctx);
}

function EVP_CipherUpdate (&ctx, &out, &outl, &in, inl, offs=0) {
    global hDLLCrypto;
    outl = binformat (0);
    ret = call (hDLLCrypto, "EVP_CipherUpdate", "rrrpi:i", ctx, out, outl, memref(in)+offs, inl);
    if (ret) {
      outl = binparse (outl);
    }
    return ret;
}

function EVP_CipherFinal (&ctx, &out, &outl) {
    global hDLLCrypto;
    outl = binformat (0);
    ret = call (hDLLCrypto, "EVP_CipherFinal", "rrr:i", ctx, out, outl);
    if (ret) {
      outl = binparse (outl);
    }
    return ret;
}

function RAND_bytes (&buf, num) {
    global hDLLCrypto;
    return call (hDLLCrypto, "RAND_bytes", "ri:i", buf, num);
}

if (!function_exists ("ERR_get_error")) {
    function ERR_get_error () {
      global hDLLCrypto;
      return call (hDLLCrypto, "ERR_get_error", [[], "i"]);
    }
}

if (!function_exists ("ERR_lib_error_string")) {
    function ERR_lib_error_string (err) {
      global hDLLCrypto;
      return call (hDLLCrypto, "ERR_lib_error_string", [["i"], "s"], err);
    }
}

OPENSSL_config ();

/* Initialization for older Versions */
/*
if (hDLLSSL) {
	call (hDLLSSL, "SSL_library_init", [[], "i"]);
	call (hDLLSSL, "SSL_load_error_strings", [[], "i"]);
}
ERR_load_crypto_strings (); 
OpenSSL_add_all_ciphers ();
OpenSSL_add_all_digests ();
*/

?>
