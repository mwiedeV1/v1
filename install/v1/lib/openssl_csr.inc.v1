<?v1
require_once ("openssl.inc.v1");

/* 
  Create Certificate Signing Request (CSR) with OpenSSL functions

  Inspirated from: http://www.codepool.biz/how-to-use-openssl-to-generate-x-509-certificate-request.html
  
  @param subject Array with subject fields 
  for example array ("C" => "DE", "ST" => "Bavaria", "L" => "Munich", "O" => "mwiede Software", "CN" => "mwiede.de", "altName"=> "DNS:mwiede.de, DNS:www.mwiede.de")
  @filename filename to save CSR in PEM format
  @bits RSA bits
  @hash Hash method (sha1, sha256 ...)
  @privKeyFile = filename to save private RSA key
  @fVerbose true = print errors

  @return OpenSSL return code, 1 = success
  
*/

function openssl_csr (subject, filename, bits=2048, digest="sha256", privKeyFile="", fOverwrite=false, fVerbose=false)
{
  global hDLLCrypto, hDLLSSL;
  
  x509_req = null;
  out = null;
  pKey = null;
  bne = null;
  
  // 1. generate rsa key
  bne = BN_new ();
  ret = BN_set_word (bne, RSA_F4);
  
  if (ret!=1) {
    if (fVerbose)
      print ("BN_set_word() failed: ", ERR_lib_error_string(ERR_get_error()));
  }
  else
  {
    r = RSA_new ();
    ret = RSA_generate_key_ex (r, bits, bne);
    if (ret!=1) {
      if (fVerbose)
        print ("RSA_generate_key_ex() failed: ", ERR_lib_error_string(ERR_get_error()));
    }
    else {
      
      // 2. set version of x509 req
      x509_req = X509_REQ_new ();
      ret = X509_REQ_set_version (x509_req, 2);
      if (ret != 1){
        if (fVerbose)
          print ("X509_REQ_new() failed: ", ERR_lib_error_string(ERR_get_error()));
      }
      else {
        // 3. set subject of x509 req      
        x509_name = X509_REQ_get_subject_name (x509_req);
        ext = null;
        foreach (subject as key => value) {
          if (empty (value))
            continue;
					// Alternative names
					if (key=="altName") {
						ext = X509V3_EXT_conf_nid (null, null, 85, value);  
						continue;
					}

          ret = X509_NAME_add_entry_by_txt (x509_name, key,  MBSTRING_ASC, value); 
          if (ret!=1) {
            if (fVerbose)
              print ("X509_NAME_add_entry_by_txt () failed:", ERR_lib_error_string(ERR_get_error()));
            break;
          }
 		    }
				
				if (ext)	{
					// Add extensions
					stack = OPENSSL_sk_new ();
					OPENSSL_sk_push (stack, ext);
					X509_REQ_add_extensions (x509_req, stack);						
					OPENSSL_sk_free (stack);
				}
				
        if (ret) {	
    		  // 4. set public key of x509 req
       		pKey = EVP_PKEY_new ();
       	 	ret = EVP_PKEY_set1_RSA (pKey, r);
        	ret = X509_REQ_set_pubkey (x509_req, pKey);
        	if (ret!=1) {
      		  if (fVerbose)
         	    print ("X509_REQ_set_pubkey() failed: ", ERR_lib_error_string(ERR_get_error()));
        	}   
        	else {
        		// 5. set sign key of x509 req
        		// digestObj = call (hDLLCrypto, "EVP_get_digestbyname", [["s"], "p"], digest);
           	digestObj = call (hDLLCrypto, "EVP_".digest, [[], "p"], digest);
        		if (!digestObj) {
        			if (fVerbose)
          			print ("EVP_".digest."() not found.");
        			ret = -1;
        		}
        		else {
              ret = X509_REQ_sign (x509_req, pKey, digestObj);
          		if (ret<=0) {
          			if (fVerbose)
            		  print ("X509_REQ_sign() failed: ", ERR_lib_error_string(ERR_get_error()));
          		}
          		else {
          			out = BIO_new_file (filename, 'w+');
          			if (out) {
            			ret = PEM_write_bio_X509_REQ (out, x509_req);
          			}
          			else {
          				if (fVerbose)
            				print ("Cannot create filename: ", filename);
           	 			ret = -1;
                }   
								BIO_free_all (out);
								out = null; 
								if (!empty (privKeyFile)) {
									// Write private key
									if (is_file (privKeyFile) && !fOverwrite) {
	          				if (fVerbose)
											print (privKeyFile." just exists, not overwritten!");
									}
									else {
										out = BIO_new_file (privKeyFile, 'w+');
										if (!out || !(ret=PEM_write_bio_RSAPrivateKey (out, r, null, null, 0, null, null))) {										
											if (fVerbose)
		            				print ("Cannot create filename: ", privKeyFile);
    		       	 			ret = -1;							
								    }
									}
								}             
              }
            }
          }
        }
      }
    }
  }
  X509_REQ_free (x509_req);
	if (out)
	  BIO_free_all (out);
  EVP_PKEY_free (pKey);
  BN_free (bne);
  return ret;
}

?>
